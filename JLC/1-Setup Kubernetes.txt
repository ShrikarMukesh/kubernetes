Master :
ssh ubuntu@3.138.103.186

Worker -1 
ssh ubuntu@3.21.185.196

Worker -2
ssh ubuntu@18.116.66.239

sudo hostnamectl set-hostname Master
sudo hostnamectl set-hostname Player-1
sudo hostnamectl set-hostname Player-2

On Master and On Workers
====================
A) Install Docker 
===================
1) Update the apt package index 

sudo apt-get update

2) Install packages to allow apt to use a repository over HTTPS:

sudo apt-get -y install apt-transport-https ca-certificates  curl  gnupg  lsb-release

3) Add Dockerâ€™s official GPG key:

 curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg


4) Use the following command to set up the stable repository. To add the nightly or test repository, add the word nightly or test (or both) after the word stable in the commands below. 

echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

5) Update the apt package index, 
 
sudo apt-get update

6) Finally Install the latest version of Docker Engine and containerd, 

 sudo apt-get -y install docker-ce docker-ce-cli containerd.io


7) Verify that Docker Version

docker --version

docker version  // See some problem

8) Add your user to the docker group.

sudo usermod -aG docker ${USER}

sudo chown -R root:docker /var/run/docker

9) Restart the Terminal

logout

ssh ubuntu@18.222.131.190

10) Verify that you can run docker commands 

docker version // Now Ok

11) Do the Following

sudo mkdir /etc/docker

cat <<EOF | sudo tee /etc/docker/daemon.json
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF

sudo systemctl enable docker
sudo systemctl daemon-reload
sudo systemctl restart docker

====================
B) Install Kubernetes
===================
1) Update the apt package index 

sudo apt-get update

2) Install packages needed to use the Kubernetes apt repository:

sudo apt-get install -y apt-transport-https ca-certificates curl

3) Download the Google Cloud public signing key:

sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg

4) Add the Kubernetes apt repository:

echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

5) Update apt package index,

sudo apt-get update

6) Install kubelet, kubeadm and kubectl

sudo apt-get install -y kubelet kubeadm kubectl

7) Pin the version of kubelet kubeadm kubectl

sudo apt-mark hold kubelet kubeadm kubectl

8) Turnoff the Swap Memory

sudo swapoff -a


=========================
On Master Only

sudo kubeadm init


Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 10.160.0.2:6443 --token ql7498.gnbxahed1el3fjvv \
        --discovery-token-ca-cert-hash sha256:3a45b9eb79957a7de771438b6f77bb53d6da7ddac712d9f4085647bc653f9da7



========================================
$ kubectl get nodes
The connection to the server localhost:8080 was refused - did you specify the right host or port?

$ mkdir -p $HOME/.kube
$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
$ sudo chown $(id -u):$(id -g) $HOME/.kube/config

$ kubectl get nodes
NAME              STATUS     ROLES                  AGE    VERSION
ip-172-31-17-11   NotReady   control-plane,master   112s   v1.22.4
========================================

$ kubectl get nodes
NAME               STATUS     ROLES                  AGE   VERSION
ip-172-31-17-11    NotReady   control-plane,master   21m   v1.22.4
ip-172-31-19-240   NotReady   <none>                 31s   v1.22.4
ip-172-31-26-191   NotReady   <none>                 16s   v1.22.4
========================================

## Weave
kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')" 

kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

========================================
ubuntu@ip-172-31-17-11:~$ kubectl get nodes
NAME               STATUS   ROLES                  AGE     VERSION
ip-172-31-17-11    Ready    control-plane,master   25m     v1.22.4
ip-172-31-19-240   Ready    <none>                 4m6s    v1.22.4
ip-172-31-26-191   Ready    <none>                 3m51s   v1.22.4
ubuntu@ip-172-31-17-11:~$

========================================
On Worker Only
========================================

sudo kubeadm join 172.31.17.11:6443 --token mm7d0m.k60pfu7mwvjcxk4d \
        --discovery-token-ca-cert-hash sha256:fb0bc54a93d1a05de7de8bb21354d6a2cdad77c0cfb2d2da7ef214c8aba6a456



========================================
kubeadm reset
sudo apt-get purge kubeadm kubectl kubelet kubernetes-cni kube*   
sudo apt-get autoremove  
sudo rm -rf ~/.kube
========================================
kubectl describe nodes Master

 mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

sudo kubeadm join 172.31.16.198:6443 --token 5lvtb7.8p8n4c6xytz8ohn9 \
        --discovery-token-ca-cert-hash sha256:bd3f7ae45afb17f6c04a1d3c7f22e6582cb0f900413c98155a7e858d6e4c7abe




