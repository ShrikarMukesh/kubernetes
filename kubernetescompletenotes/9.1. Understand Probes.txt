Master :
ssh ubuntu@52.14.14.192

Observability
================================
9.1. Understand Probes
================================
Pod Lifecycle

=> Pod has Pod Status and Pod Conditions

===========
A) Pod Status
===========
1) Pending 
----------------
=> When Pod is created then Pod will be in Pending State.

2) ContainerCreating
----------------------------	
=> When Pod is scheduled to Node then starts the following
 ***Pulling images over the network 
 ***Starts creating Containers. 
=> This time Pod Status is ContainerCreating

3)Running
------------------
=> The Pod is scheduled to Node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. This time Pod Status is Running

4) Succeeded	
------------------
=> All containers in the Pod have terminated in success, and will not be restarted.
=> This time Pod Status is Succeeded	

5) Failed	
------------------
=> All containers in the Pod have terminated, and at least one container has terminated in failure. => => That is, the container either exited with non-zero status or was terminated by the system. 
=> This time Pod Status is Failed	

6) Unknown
------------------	
=> For some reason the state of the Pod could not be obtained. 
=> This phase typically occurs due to an error in communicating with the node where the Pod is running.

===========
B) Pod conditions 
===========

1) PodScheduled: 
--------------------------
=> Pod has been scheduled to a node.
=> Possible Values - True or False

2) ContainersReady: 
--------------------------
=> All containers in the Pod are ready.
=> Possible Values - True or False

3) Initialized: 
--------------------------
=> All init containers have Initialized successfully.
=> Possible Values - True or False

4) Ready:
--------------------------
=> Pod is able to serve requests and should be added to the load balancing pools of all matching Services.
=> Possible Values - True or False

==================
mypod35.yml
==================
apiVersion: v1
kind: Pod
metadata:
  name: jlcpod
spec:
  containers:
  - name: mynginx
    image: nginx


=======================================
scp mypod35.yml ubuntu@52.14.14.192:/home/ubuntu/observability
=============================

kubectl create -f mypod35.yml

kubectl get pods 

kubectl describe pod jlcpod

kubectl delete pod jlcpod


==================
Types of Probes
==================
1) Readiness Probe
2) Liveness Probe
3) Startup Probe

1) Readiness Probe
==================
=> Kubelet uses readiness probes to know when a container is ready to start accepting traffic. 

=> Pod is considered ready when all of its containers are ready. One use of this signal is to control which Pods are used as backends for Services. 

=> When a Pod is not ready, it is removed from Service load balancers.

2) Liveness Probe
==================
=> Kubelet uses liveness probes to know when to restart a container. 

=> For example, liveness probes could catch a deadlock, where an application is running, but unable to make progress. 

=> Restarting a container in such a state can help to make the application more available despite bugs.

3) Startup Probe
==================
=> Kubelet uses startup probes to know when a container application has started. 

=> If such a probe is configured, it disables liveness and readiness checks until it succeeds, making sure those probes don't interfere with the application startup. 

=> This can be used to perform liveness checks on slow starting containers, avoiding them getting killed by the kubelet before they are up and running.

========================
Container probes for Readiness
========================
1) httpGet
-------------
=> Performs an HTTP GET request against the Pod's IP address on a specified port and path.

=> This Probe is considered successful if the response has a status code greater than or equal to 200 and less than 400.

Ex:
  readinessProbe:
      httpGet:
        path: /index.html
        port: 80
      initialDelaySeconds: 10
      periodSeconds: 5
      failureThreshold: 5

   livenessProbe:
       httpGet:
        path: /index.html
        port: 80
      initialDelaySeconds: 10
      periodSeconds: 5
      failureThreshold: 5

 startupProbe:
      httpGet:
        path: /index.html
        port: 8080
      failureThreshold: 30
      periodSeconds: 10 

2) tcpSocket
------------------
=> Performs a TCP check against the Pod's IP address on a specified port. 
=> This Probe is considered successful  if the port is open.

Ex:
  readinessProbe:
      tcpSocket:
        port: 8080
      initialDelaySeconds: 10
      periodSeconds: 5
      failureThreshold: 5


     livenessProbe:
      tcpSocket:
        port: 8080
      initialDelaySeconds: 10
      periodSeconds: 5
      failureThreshold: 5


   startupProbe:
      tcpSocket:
        port: 8080
      failureThreshold: 30
      periodSeconds: 10 


3) exec
------------
=> Executes a specified command inside the container. 
=> This Probe is considered successful if the command exits with a status code of 0.

Ex:
 readinessProbe:
      exec:
        command:
        - cat
        - /tmp/myjlcdata
      initialDelaySeconds: 10
      periodSeconds: 5
      failureThreshold: 5


    livenessProbe:
      exec:
        command:
        - cat
        - /tmp/myjlcdata
      initialDelaySeconds: 10
      periodSeconds: 5
      failureThreshold: 5


 startupProbe:
      exec:
        command:
        - cat
        - /tmp/myjlcdata
      failureThreshold: 30
      periodSeconds: 10 

===============
Configure Probes
===============
Probes have a number of fields that you can use to more precisely control the behavior of liveness and readiness checks:

1) initialDelaySeconds: 
----------------------------
=> Number of seconds after the container has started before liveness or readiness probes are initiated.
=> Defaults to 0 seconds. 
=> Minimum value is 0.

2) periodSeconds: 
----------------------------
=> How often (in seconds) to perform the probe. 
=> Default to 10 seconds. 
=> Minimum value is 1.

3) timeoutSeconds: 
----------------------------
=> Number of seconds after which the probe times out. 
=> Defaults to 1 second. 
=> Minimum value is 1.

4) successThreshold: 
----------------------------
=> Minimum consecutive successes for the probe to be considered successful after having failed. => Defaults to 1. 
=> Must be 1 for liveness and startup Probes. 
=> Minimum value is 1.

5) failureThreshold: 
----------------------------
=> When a probe fails, Kubernetes will try failureThreshold times before giving up. 
=> Giving up in case of liveness probe means restarting the container.
=> Giving up In case of readiness probe means the Pod will be marked Unready. 
=> Defaults to 3. 
=> Minimum value is 1.

